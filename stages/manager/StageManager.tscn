[gd_scene load_steps=14 format=2]

[ext_resource path="res://stages/manager/StageManager.gd" type="Script" id=1]
[ext_resource path="res://stages/manager/Overlay.gd" type="Script" id=2]
[ext_resource path="res://white_dot.png" type="Texture" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float screen_resolution_x : hint_range(0, 3840, 1);
uniform float screen_resolution_y : hint_range(0, 2160, 1);
uniform float crt_color_strength : hint_range(0, 1) = 1.f;
uniform vec4 back_light : hint_color = vec4(vec3(0.f), 1.f);
uniform float brightness : hint_range(0, 10);
uniform float bulge_strength : hint_range(0, .1) = .01;

vec2 distort_uv(vec2 uv) {
	float x_offset = (1.f - mix(1.f, sin(uv.y * 3.14159), bulge_strength)) * screen_resolution_x / screen_resolution_y;
	float y_offset = 1.f - mix(1.f, sin(uv.x * 3.14159), bulge_strength);
	uv.x = mix(-x_offset, 1.f + x_offset, uv.x);
	uv.y = mix(-y_offset, 1.f + y_offset, uv.y);
	return uv;
}

vec3 split_pixel(vec3 color, vec2 uv) {
	vec2 pixel = uv * vec2(screen_resolution_x, screen_resolution_y);
	vec2 decimals = mod(pixel, vec2(1.f));
	float r = sin(clamp(3.f * decimals.x, 0, 1) * 3.14159) * sin(decimals.y * 3.14159);
	float g = sin(clamp(3.f * decimals.x - 1.f, 0, 1) * 3.14159) * sin(decimals.y * 3.14159);
	float b = sin(clamp(3.f * decimals.x - 2.f, 0, 1) * 3.14159) * sin(decimals.y * 3.14159);
	vec3 crt_color = back_light.rgb + color * brightness * vec3(r, g, b);
	
	return mix(color, crt_color, crt_color_strength);
}

void fragment() {
	vec2 uv = distort_uv(SCREEN_UV);
	COLOR.rgb = split_pixel(texture(SCREEN_TEXTURE, uv).rgb, uv);
	if(uv.x > 1.f || uv.x < 0.f || uv.y > 1.f || uv.y < 0.f) {
		COLOR.rgb = back_light.rgb;
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/screen_resolution_x = 320.0
shader_param/screen_resolution_y = 176.0
shader_param/crt_color_strength = 0.533
shader_param/back_light = Color( 0.0705882, 0.0862745, 0.105882, 1 )
shader_param/brightness = 5.238
shader_param/bulge_strength = 0.031

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform sampler2D noise_texture;
uniform float displacement_strength : hint_range(0, 0.2) = 0.01f;
uniform float noise_offset : hint_range(0, 1) = 0.f;

void fragment() {
	vec2 uv = SCREEN_UV;
	float noise_a = texture(noise_texture, vec2(mod(noise_offset, 1), uv.y)).r;
	float noise_b = texture(noise_texture, vec2(mod(noise_offset + .5, 1), -uv.y)).r;
	float noise = smoothstep(noise_a, .4, .6) - smoothstep(noise_b, .4, .6);
	uv.x += noise * displacement_strength;
	COLOR = texture(SCREEN_TEXTURE, uv);
	COLOR.rgb += .3f * vec3(clamp(noise, 0.f, 1.f));
}"

[sub_resource type="OpenSimplexNoise" id=4]
period = 69.2
persistence = 0.301

[sub_resource type="NoiseTexture" id=5]
seamless = true
noise = SubResource( 4 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 3 )
shader_param/displacement_strength = 0.059
shader_param/noise_offset = 0.0
shader_param/noise_texture = SubResource( 5 )

[sub_resource type="Animation" id=7]
length = 2.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/noise_offset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}

[sub_resource type="Animation" id=10]
tracks/0/type = "value"
tracks/0/path = NodePath(".:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.4, 0.5, 0.9, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ true, false, true, false, true, false ]
}

[sub_resource type="Shader" id=14]
code = "shader_type canvas_item;

uniform float hue_shift : hint_range(0, 1) = 0.0;
uniform float saturation_shift : hint_range(-1, 1) = 0.0;
uniform float value_shift : hint_range(-1, 1) = 0.0;

// RGB<->HSV conversions by Sam Hocevar
// Public domain license
// https://stackoverflow.com/posts/17897228/revisions
vec3 rgb2hsv(vec3 c) {
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void fragment() {
	vec4 c = texture(SCREEN_TEXTURE, SCREEN_UV);
	vec3 hsv = rgb2hsv(c.rgb);
	hsv.r += hue_shift;
	hsv.g = clamp(hsv.g + saturation_shift, 0.0, 1.0);
	hsv.b = clamp(hsv.b + value_shift, 0.0, 1.0);
	c.rgb = hsv2rgb(hsv);
	COLOR = c;
}"

[sub_resource type="ShaderMaterial" id=15]
shader = SubResource( 14 )
shader_param/hue_shift = 0.0
shader_param/saturation_shift = 0.0
shader_param/value_shift = 0.141

[node name="StageManager" type="Node"]
pause_mode = 2
script = ExtResource( 1 )

[node name="Canvas" type="CanvasLayer" parent="."]
layer = 10

[node name="ScreenOverlay" type="ColorRect" parent="Canvas"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 1, 1, 1, 0 )
script = ExtResource( 2 )

[node name="Tween" type="Tween" parent="Canvas/ScreenOverlay"]

[node name="CRT" type="ColorRect" parent="Canvas"]
visible = false
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Glitch" type="ColorRect" parent="Canvas"]
visible = false
material = SubResource( 6 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="Canvas/Glitch"]
autoplay = "glitch"
anims/glitch = SubResource( 7 )

[node name="ScreenFlicker" type="ColorRect" parent="Canvas"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 0.815686 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="Canvas/ScreenFlicker"]
anims/flicker = SubResource( 10 )

[node name="PausedStages" type="Node" parent="."]

[node name="CurrentStage" type="Node2D" parent="."]

[node name="PaletteSwap" type="Sprite" parent="."]
visible = false
material = SubResource( 15 )
position = Vector2( 1174, 713 )
scale = Vector2( 2114, 1261 )
z_index = 1000
texture = ExtResource( 3 )
